library(installr)
updateR()
utils:::menuInstallLocal()
update.packages(ask='graphics',checkBuilt=TRUE)
updateR()
q()
getwd()
setwd('D:/gitnote/R_stats_note')
rm(list = ls())
library(RSVGTipsDevice)  # install.packages("RSVGTipsDevice")
source(RSVGTipsDevice)  # install.packages("RSVGTipsDevice")
# xy=cbind(x,y)
MyPlot <- function(xy, xlim = c(-4, 4), ylim = c(-4, 4), eps = 1e-15) {
title = round(cor(xy[,1], xy[,2]), 2)
if (sd(xy[,2]) < eps) title = "" # corr. coeff. is undefined
plot(xy, main = title, xlab = "", ylab = "",  col = "darkblue",
pch = 16, cex = 0.2, xaxt = "n", yaxt = "n", bty = "n",
xlim = xlim, ylim = ylim)
}
MvNormal <- function(n = 1000, cor = 0.8) {
for (i in cor) {
sd = matrix(c(1, i, i, 1), ncol = 2)
x = rmvnorm(n, c(0, 0), sd)
MyPlot(x)
}
}
rotation <- function(t, X) return(X %*% matrix(c(cos(t), sin(t), -sin(t), cos(t)), ncol = 2))
rotation <- function(t, X){
return(X %*% matrix(c(cos(t), sin(t), -sin(t), cos(t)), ncol = 2))
}
RotNormal <- function(n = 1000, t = pi/2) {
sd = matrix(c(1, 1, 1, 1), ncol = 2)
x = rmvnorm(n, c(0, 0), sd)
for (i in t)
MyPlot(rotation(i, x))
}
x = runif(n, -1, 1)
n = 1000
x = runif(n, -1, 1)
y = 4 * (x^2 - 1/2)^2 + runif(n, -1, 1)/3
par(mfrow = c(1, 1))
xy <- cbind(x,y)
cor(xy[,1], xy[,2])
plot(xy)
fx <- 4 * (x^2 - 1/2)^2
points(x,fx,col="red")
cor(y,fx)
x = runif(n, -1, 1)
y = 4 * (x^2 - 1/2)^2 + runif(n, -1, 1)/3
MyPlot(cbind(x,y), xlim = c(-1, 1), ylim = c(-1/3, 1+1/3))
y = runif(n, -1, 1)
xy = rotation(-pi/8, cbind(x,y))
lim = sqrt(2+sqrt(2)) / sqrt(2)
MyPlot(xy, xlim = c(-lim, lim), ylim = c(-lim, lim))
xy = rotation(-pi/8, xy)
MyPlot(xy, xlim = c(-sqrt(2), sqrt(2)), ylim = c(-sqrt(2), sqrt(2)))
y = 2*x^2 + runif(n, -1, 1)
MyPlot(cbind(x,y), xlim = c(-1, 1), ylim = c(-1, 3))
y = (x^2 + runif(n, 0, 1/2)) * sample(seq(-1, 1, 2), n, replace = TRUE)
MyPlot(cbind(x,y), xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5))
y = cos(x*pi) + rnorm(n, 0, 1/8)
x = sin(x*pi) + rnorm(n, 0, 1/8)
MyPlot(cbind(x,y), xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5))
xy1 = rmvnorm(n/4, c( 3,  3))
xy2 = rmvnorm(n/4, c(-3,  3))
xy1 = rmvnorm(n/4, c(3, 3))
library(mvtnorm)
mvnorm(n/4, c(3, 3))
xy1 = rmvtnorm(n/4, c(3, 3))
xy1 = rmvnorm(n/4, c(3, 3))
xy2 = rmvnorm(n/4, c(-3, 3))
xy3 = rmvnorm(n/4, c(-3, -3))
xy4 = rmvnorm(n/4, c(3, -3))
MyPlot(rbind(xy1, xy2, xy3, xy4), xlim = c(-3-4, 3+4), ylim = c(-3-4, 3+4))
Others <- function(n = 1000) {
x = runif(n, -1, 1)
y = 4 * (x^2 - 1/2)^2 + runif(n, -1, 1)/3
MyPlot(cbind(x,y), xlim = c(-1, 1), ylim = c(-1/3, 1+1/3))
y = runif(n, -1, 1)
xy = rotation(-pi/8, cbind(x,y))
lim = sqrt(2+sqrt(2)) / sqrt(2)
MyPlot(xy, xlim = c(-lim, lim), ylim = c(-lim, lim))
xy = rotation(-pi/8, xy)
MyPlot(xy, xlim = c(-sqrt(2), sqrt(2)), ylim = c(-sqrt(2), sqrt(2)))
y = 2*x^2 + runif(n, -1, 1)
MyPlot(cbind(x,y), xlim = c(-1, 1), ylim = c(-1, 3))
y = (x^2 + runif(n, 0, 1/2)) * sample(seq(-1, 1, 2), n, replace = TRUE)
MyPlot(cbind(x,y), xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5))
y = cos(x*pi) + rnorm(n, 0, 1/8)
x = sin(x*pi) + rnorm(n, 0, 1/8)
MyPlot(cbind(x,y), xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5))
xy1 = rmvnorm(n/4, c(3, 3))
xy2 = rmvnorm(n/4, c(-3, 3))
xy3 = rmvnorm(n/4, c(-3, -3))
xy4 = rmvnorm(n/4, c(3, -3))
MyPlot(rbind(xy1, xy2, xy3, xy4), xlim = c(-3-4, 3+4), ylim = c(-3-4, 3+4))
}
devSVGTips(width = 7, height = 3.2) # remove first and last line for no svg exporting
par(mfrow = c(3, 7), oma = c(0,0,0,0), mar=c(2,2,2,0))
MvNormal(800, c(1.0, 0.8, 0.4, 0.0, -0.4, -0.8, -1.0));
RotNormal(200, c(0, pi/12, pi/6, pi/4, pi/2-pi/6, pi/2-pi/12, pi/2));
Others(800)
getwd()
jpeg(filename = "cor.jpg", width = 7, height = 3.2, units="cm")
jpeg(filename = "cor.jpg", width = 1500, height = 700, units="px")
par(mfrow = c(3, 7), oma = c(0,0,0,0), mar=c(2,2,2,0))
MvNormal(800, c(1.0, 0.8, 0.4, 0.0, -0.4, -0.8, -1.0));
RotNormal(200, c(0, pi/12, pi/6, pi/4, pi/2-pi/6, pi/2-pi/12, pi/2));
Others(800)
dev.off()  # remove first and last line for no svg exporting
jpeg(filename = "cor.jpg", width = 1500, height = 800, units="px")
par(mfrow = c(3, 7), oma = c(0,0,0,0), mar=c(2,2,2,0))
MvNormal(800, c(1.0, 0.8, 0.4, 0.0, -0.4, -0.8, -1.0));
RotNormal(200, c(0, pi/12, pi/6, pi/4, pi/2-pi/6, pi/2-pi/12, pi/2));
Others(800)
dev.off()  # remove first and last line for no svg exporting
output()
source('D:/gitnote/R_stats_note/cor_plot.R')
source('D:/gitnote/R_stats_note/cor_plot.R')
source('D:/gitnote/R_stats_note/cor_plot.R')
source('D:/gitnote/R_stats_note/cor_plot.R')
getwd()
setwd('D:/gitnote/R_stats_note')
rm(list = ls())
getwd()
setwd('D:/gitnote/R_stats_note')
rm(list = ls())
a <- 0.5
x <- seq(0,100,1)
y <- 450 + a*(x-10)^3
plot(x, y, type='l',col='navy',main='Nonlinear relationship',lwd=3)
a <- 0.5
x <- seq(-100, 100, 1)
y <- 450 + a*(x-10)^3
plot(x, y, type='l',col='navy',main='Nonlinear relationship',lwd=3)
a <- 0.5
x <- seq(-100, 100, 1)
y <- 450 + a*(x-10)^3
plot(x, y, type='l',col='navy',main='Nonlinear relationship',lwd=3)
set.seed(20)
# 预测变量x：使用seq来快速产生等间距的序列：
x <- seq(from=0, to=20, by=0.1)
预测y值：
set.seed(20)
# 预测变量x：使用seq来快速产生等间距的序列：
x <- seq(from=0, to=20, by=0.1)
y <- 500 + 0.4 * (x-10)^3
# 我们现在产生一些噪音并把它添加到模型中：
noise <- rnorm(length(q), mean=10, sd=80)
# 我们现在产生一些噪音并把它添加到模型中：
noise <- rnorm(length(x), mean=10, sd=80)
noisy.y <- y + noise
# 对噪声数据进行画图：
plot(x, noisy.y, col='deepskyblue4', xlab='q', main='Observed data')
lines(x, y, col='firebrick1', lwd=3)
# 我们得出的模型应当是 y = a x + b x^2 + c* x3 + cost
# 现在，我们用R对此进行模拟。要拟合一个多项式模型，你也可以这样用：
model <- lm(noisy.y ~ poly(x, 3))
# 或者：
model_2 <- lm(noisy.y ~ x + I(x^2) + I(x^3))
summary(model)
summary(model_2)
summary(model)
# 我们得出的模型应当是 y = a x + b x^2 + c* x3 + cost
# 现在，我们用R对此进行模拟。要拟合一个多项式模型，你也可以这样用：
model <- lm(noisy.y ~ poly(x, 3))
summary(model)
# 或者：
model_2 <- lm(noisy.y ~ x + I(x^2) + I(x^3))
summary(model_2)
# 我们可以使用confint()来获得一个模型的参数的置信区间。
# 模型参数的置信区间：
confint(model, level=0.95)
plot(fitted(model), residuals(model))
summary(model)
predicted.intervals <- predict(model,data.frame(x=q),interval='confidence',level=0.99)
predicted.intervals <- predict(model, data.frame(x=x), interval='confidence', level=0.99)
# 在已有的图像中添加拟合线：
lines(q,predicted.intervals[,1],col='green',lwd=3)
# 在已有的图像中添加拟合线：
lines(x, predicted.intervals[,1], col='green', lwd=3)
lines(x, predicted.intervals[,2], col='black', lwd=1)
lines(x, predicted.intervals[,3], col='black', lwd=1)
predicted.intervals <- predict(model, data.frame(x=x), interval='confidence', level=0.99)
# 对噪声数据进行画图：
plot(x, noisy.y, col='deepskyblue4', xlab='q', main='Observed data')
lines(x, y, col='firebrick1', lwd=3)
# 在已有的图像中添加拟合线：
lines(x, predicted.intervals[,1], col='green', lwd=3)
lines(x, predicted.intervals[,2], col='black', lwd=1)
lines(x, predicted.intervals[,3], col='black', lwd=1)
# 添加图例：
legend("bottomright",c("Observ.","Signal","Predicted"),
col=c("deepskyblue4","red","green"), lwd=3)
summary(model)
model$coefficients
model$coefficients
set.seed(20)
# 预测变量x：使用seq来快速产生等间距的序列：
x <- seq(from=0, to=20, by=0.1)
y <- 500 + 0.4 * (x-10)^3
y <- 0.4 * x^3 - 12 * x^2 + 120 * x + 100
# 我们现在产生一些噪音并把它添加到模型中：
noise <- rnorm(length(x), mean=10, sd=80)
noisy.y <- y + noise
# 对噪声数据进行画图：
plot(x, noisy.y, col='deepskyblue4', xlab='q', main='Observed data')
lines(x, y, col='firebrick1', lwd=3)
# 预测变量x：使用seq来快速产生等间距的序列：
x <- seq(from=0, to=20, by=0.1)
y <- 500 + 0.4 * (x-10)^3
y2 <- 0.4 * x^3 - 12 * x^2 + 120 * x + 100
# 我们现在产生一些噪音并把它添加到模型中：
noise <- rnorm(length(x), mean=10, sd=80)
noisy.y <- y + noise
# 对噪声数据进行画图：
plot(x, noisy.y, col='deepskyblue4', xlab='q', main='Observed data')
lines(x, y, col='firebrick1', lwd=3)
lines(x, y2, col='blue', lwd=3)
# 我们得出的模型应当是 y = a x + b x^2 + c* x3 + epsilon
# 现在，我们用R对此进行模拟。要拟合一个多项式模型，你也可以这样用：
model <- lm(noisy.y ~ poly(x, 3))
summary(model)
# 或者：
model_2 <- lm(noisy.y ~ x + I(x^2) + I(x^3))
summary(model_2)
model <- lm(noisy.y ~ poly(x, degree=2, raw=TRUE))
summary(model)
aa = I(x^2)
# 我们可以使用confint()来获得一个模型的参数的置信区间。
# 模型参数的置信区间：
confint(model, level=0.95)
aa = I(x^2)
aa
aa = matrix(I(x^2))
View(aa)
poly(1:10, 2)
poly(1:10, 2, raw=TRUE)
poly(1:10, 2)
poly(1:10, 2, raw=TRUE)
poly(1:10, 2)
a1 <- poly(1:10, 2, raw=TRUE)
b1 <- poly(1:10, 2)
a1
b1
View(a1)
View(b1)
library(ISLR)
fm2raw <- lm(mpg ~ poly(horsepower, 2, raw = TRUE), Auto)
cbind(coef(fm2raw))
fm3raw <- lm(mpg ~ poly(horsepower, 3, raw = TRUE), Auto)
cbind(coef(fm3raw))
fm2 <- lm(mpg ~ poly(horsepower, 2), Auto)
cbind(coef(fm2))
fm3 <- lm(mpg ~ poly(horsepower, 3), Auto)
cbind(coef(fm3))
b1
a2 <- I((1:10)^2)
a2 <- matrix(I((1:10)^2))
View(a2)
x1 <- 1:10
a2 <- matrix(c(x1, I(x1^2)))
View(a2)
a2 <- matrix(c(x1, I(x1^2)), ncol = 2)
View(a2)
a2 - c(5.5, 5.5)
a3 <- a2 - c(5.5, 5.5)
norm(a3)
apply(a2, 1, norm)
apply(a2, 2, norm)
apply(a2, 1, function(x) sqrt(sum(x^2)))
apply(a2, 2, function(x) sqrt(sum(x^2)))
apply(a3, 2, function(x) sqrt(sum(x^2)))
x1 <- 1:10
a2 <- matrix(c(x1, I(x1^2)), ncol = 2)
a3 <- a2 - c(5.5, 5.5)
apply(a2, 2, function(x) sqrt(sum(x^2)))
a2 <- matrix(c(x1, I(x1^2)), ncol = 2)
a3 <- apply(a2, 2, function(x) sqrt(sum(x^2)))
a4 <- (a2 - c(5.5, 5.5)) / a3
View(a4)
View(b1)
a4 <- (a2 - c(5.5, 5.5))
View(a4)
a3
a4 <- (a2 - c(5.5, 5.5)) / a3
View(a4)
a4 <- (a2 - c(5.5, 5.5))
View(a4)
a3 <- apply(a2, 2, function(x) sqrt(sum(x^2)))
a3
a4 <- (a2 - c(5.5, 5.5)) / a3
View(a4)
a44 <- (a2 - c(5.5, 5.5))
View(a4)
View(a44)
3.5/19
58.5/159
43.5/159
43.5/19.6
c(a3)
a44 <- (a2 - c(5.5, 5.5)) / c(a3)
View(a44)
a44 <- apply(a2 - c(5.5, 5.5), 2, function(x) x / a3)
a3 <- apply(a2, 2, function(x) sqrt(sum(x^2)))
a44 <- apply(a2 - c(5.5, 5.5), 2, function(x) x / a3)
View(a44)
a44 <- apply(a2 - c(5.5, 5.5), 1, function(x) x / a3)
View(a44)
